package api

import (
	"github.com/gin-gonic/gin"
	"github.com/nashlibby/gk"
    "{{.AppName}}/app/internal/logic"
)

// 注册请求
type RegisterRequest struct {
	Name    string `json:"name" binding:"required"`
	Phone   string `json:"phone" binding:"required"`
	Captcha string `json:"captcha" binding:"required"`
}

{{if not .UseSwagger}}
// 注册接口{{else}}
// @Summary 注册接口
// @Tags 基础接口
// @Router /register [post]
// @accept json
// @Param request body RegisterRequest true "注册请求"
// @Produce json
// @Success 200
// @Failure 500{{end}}
func Register(c *gin.Context) {
	var request RegisterRequest
	if err := c.ShouldBindJSON(&request); err != nil {
		gk.GinFail(c, 500, "param invalid: "+err.Error())
		return
	}

	// TODO 注册逻辑

	// 生成token
	accessToken, err := logic.NewAuthLogic().MakeToken(request.Phone, "USER_ID", 2)
	if err != nil {
		gk.GinFail(c, 500, err.Error())
		return
	}

	gk.GinSuccess(c, 200, "注册成功", map[string]interface{}{
		"token": map[string]interface{}{
			"token_type":   "Bearer",
			"access_token": accessToken,
			"expires_in":   3600 * 48,
		},
	})
}

// 登录请求
type LoginRequest struct {
	Phone     string `json:"phone" binding:"required"`
	Password  string `json:"password" binding:"required"`
	LoginType string `json:"login_type" binding:"required"`
}

{{if not .UseSwagger}}
// 登录接口{{else}}
// @Summary 登录接口
// @Tags 基础接口
// @Router /login [post]
// @accept json
// @Param request body LoginRequest true "登录请求"
// @Produce json
// @Success 200
// @Failure 500{{end}}
func Login(c *gin.Context) {
	var request LoginRequest
	if err := c.ShouldBindJSON(&request); err != nil {
		gk.GinFail(c, 500, "param invalid: "+err.Error())
		return
	}

    // 验证验证码
    err := logic.NewCaptchaLogic().Verify(request.Phone, request.Password)
    if err != nil {
        gk.GinFail(c, 500, "验证码错误")
        return
    }

	// TODO 登录逻辑

	// 生成token
	accessToken, err := logic.NewAuthLogic().MakeToken(request.Phone, "USER_ID", 2)
	if err != nil {
		gk.GinFail(c, 500, err.Error())
		return
	}

	gk.GinSuccess(c, 200, "登录成功", map[string]interface{}{
		"token": map[string]interface{}{
			"token_type":   "Bearer",
			"access_token": accessToken,
			"expires_in":   3600 * 48,
		},
	})
}

// 发送验证码请求
type SendCaptchaRequest struct {
	Phone string `json:"phone" binding:"required"`
}

// @Summary 发送短信验证码接口
// @Tags 基础接口
// @Router /send_captcha [post]
// @accept json
// @Param request body SendCaptchaRequest true "发送验证码请求"
// @Produce json
// @Success 200
// @Failure 500
func SendCaptcha(c *gin.Context) {
	var request SendCaptchaRequest
	if err := c.ShouldBindJSON(&request); err != nil {
		gk.GinFail(c, 500, "param invalid: "+err.Error())
		return
	}

	// 发送验证码
	err := logic.NewCaptchaLogic().Send(request.Phone)
	if err != nil {
		gk.GinFail(c, 500, "验证码发送失败: "+err.Error())
		return
	}

	gk.GinSuccess(c, 200, "发送成功", nil)
}

