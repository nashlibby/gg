package api

import (
	"github.com/gin-gonic/gin"
	"strconv"
	"{{.AppName}}/app/internal/dao/model"
	"{{.AppName}}/app/internal/service"
	"github.com/nashlibby/gk"
)

{{if not .UseSwagger}}
// {{.ModuleText}}列表接口{{else}}
// @Tags {{.ModuleText}}列表接口
// @Router /{{.ModuleName}} [get]
// @Param Authorization header string {{if .NeedAuth}}true{{else}}false{{end}} "Bearer {token}"
// @Param page query int false "页码"
// @Param size query int false "每页数量"
// @Produce json
// @Success 200
// @Failure 500{{end}}
func {{.ModuleName | FirstUpper}}Index(c *gin.Context) {
	page, _ := strconv.Atoi(c.DefaultQuery("page", "1"))
	size, _ := strconv.Atoi(c.DefaultQuery("size", "15"))

	query := map[string]map[string]interface{}{
		"1": {"=": 1},
	}

	{{.ModuleName}}List, paginate, err := service.New{{.ModuleName | FirstUpper}}Service().GetPaginate(query, int64(page), int64(size))
	if err != nil {
		gk.GinFail(c, 500, err.Error())
		return
	}

	gk.GinSuccess(c, 200, "获取成功", map[string]interface{}{
		"{{.ModuleName}}_list": {{.ModuleName}}List,
		"paginate":     paginate,
	})
}

{{if not .UseSwagger}}
// {{.ModuleText}}详情接口{{else}}
// @Tags {{.ModuleText}}详情接口
// @Router /{{.ModuleName}}/:id [get]
// @Param Authorization header string {{if .NeedAuth}}true{{else}}false{{end}} "Bearer {token}"
// @Param page path string true "id"
// @Produce json
// @Success 200
// @Failure 500{{end}}
func {{.ModuleName | FirstUpper}}Show(c *gin.Context) {
	id := c.Param("id")
	{{.ModuleName}}Data, err := service.New{{.ModuleName | FirstUpper}}Service().FindById(id)
	if err != nil {
		gk.GinFail(c, 500, "{{.ModuleText}}不存在")
		return
	}

	gk.GinSuccess(c, 200, "获取成功", map[string]interface{}{
		"{{.ModuleName}}": {{.ModuleName}}Data,
	})
}

// 创建{{.ModuleText}}请求
type Create{{.ModuleName | FirstUpper}}Request struct {
}

{{if not .UseSwagger}}
// 创建{{.ModuleText}}接口{{else}}
// @Tags 创建{{.ModuleText}}接口
// @Router /{{.ModuleName}} [post]
// @Param Authorization header string {{if .NeedAuth}}true{{else}}false{{end}} "Bearer {token}"
// @accept json
// @Param request body Create{{.ModuleName | FirstUpper}}Request true "创建{{.ModuleText}}接口请求参数"
// @Produce json
// @Success 200
// @Failure 500{{end}}
func Create{{.ModuleName | FirstUpper}}(c *gin.Context) {
	var request Create{{.ModuleName | FirstUpper}}Request
	if err := c.ShouldBindJSON(&request); err != nil {
		gk.GinFail(c, 500, "参数错误: "+err.Error())
		return
	}

	{{.ModuleName}}Service := service.New{{.ModuleName | FirstUpper}}Service()
	{{.ModuleName}} := model.{{.ModuleName | FirstUpper}}{}
    err := {{.ModuleName}}Service.Create(&{{.ModuleName}})
    if err != nil {
        gk.GinFail(c, 500, "创建失败: "+err.Error())
        return
    }

	{{.ModuleName}}Data, _ := {{.ModuleName}}Service.FindById({{.ModuleName}}.Id)
	gk.GinSuccess(c, 200, "创建成功", map[string]interface{}{
		"{{.ModuleName}}": {{.ModuleName}}Data,
	})
}

// 更新{{.ModuleText}}请求
type Update{{.ModuleName | FirstUpper}}Request struct {
}

{{if not .UseSwagger}}
// 更新{{.ModuleText}}接口{{else}}
// @Tags 更新{{.ModuleText}}接口
// @Router /{{.ModuleName}}/:id [patch]
// @Param Authorization header string {{if .NeedAuth}}true{{else}}false{{end}} "Bearer {token}"
// @Param page path string true "id"
// @accept json
// @Param request body Update{{.ModuleName | FirstUpper}}Request true "更新{{.ModuleText}}接口请求参数"
// @Produce json
// @Success 200
// @Failure 500{{end}}
func Update{{.ModuleName | FirstUpper}}(c *gin.Context) {
	var request Update{{.ModuleName | FirstUpper}}Request
	if err := c.ShouldBindJSON(&request); err != nil {
		gk.GinFail(c, 500, "参数错误: "+err.Error())
		return
	}
	id := c.Param("id")
    {{.ModuleName}}Service := service.New{{.ModuleName | FirstUpper}}Service()
	_, err := {{.ModuleName}}Service.FindById(id)
	if err != nil {
		gk.GinFail(c, 500, "{{.ModuleText}}不存在")
		return
	}

    data := map[string]interface{}{}
	err = {{.ModuleName}}Service.UpdateById(id, data)
	if err != nil {
		gk.GinFail(c, 500, "{{.ModuleText}}更新失败: "+err.Error())
		return
	}

	{{.ModuleName}}Data, _ := {{.ModuleName}}Service.FindById(id)
	gk.GinSuccess(c, 200, "更新成功", map[string]interface{}{
		"{{.ModuleName}}": {{.ModuleName}}Data,
	})
}

{{if not .UseSwagger}}
// 删除{{.ModuleText}}接口{{else}}
// @Tags 删除{{.ModuleText}}接口
// @Router /{{.ModuleName}}/:id [delete]
// @Param Authorization header string {{if .NeedAuth}}true{{else}}false{{end}} "Bearer {token}"
// @Param page path string true "id"
// @Produce json
// @Success 200
// @Failure 500{{end}}
func Delete{{.ModuleName | FirstUpper}}(c *gin.Context) {
	id := c.Param("id")
    {{.ModuleName}}Service := service.New{{.ModuleName | FirstUpper}}Service()
	_, err := {{.ModuleName}}Service.FindById(id)
	if err != nil {
		gk.GinFail(c, 500, "{{.ModuleText}}不存在")
		return
	}
	err = {{.ModuleName}}Service.DeleteById(id)
	if err != nil {
		gk.GinFail(c, 500, "删除失败")
		return
	}

	gk.GinSuccess(c, 200, "删除成功")
}