package main

import (
	"github.com/gin-gonic/gin"
	"github.com/spf13/viper"
    "log"
	"{{.ModuleName}}/app/api"
	"{{.ModuleName}}/app/common"
	"{{.ModuleName}}/app/middleware"
	"{{.ModuleName}}/app/migrate"
	"github.com/nashlibby/gk"
	{{if .UseSwagger}}
    "{{.ModuleName}}/docs"
    swaggerfiles "github.com/swaggo/files"
    ginSwagger "github.com/swaggo/gin-swagger"
	{{end}}
)

func main() {

	// 获取配置
	viper.AddConfigPath(".")
	err := viper.ReadInConfig()
	if err != nil {
		log.Fatal("Error: Fail to load config")
	}

	// 获取mysql配置
	mysqlConfig := common.MysqlConfig{
		Host:     viper.GetString("db.host"),
		Port:     viper.GetInt("db.port"),
		Username: viper.GetString("db.username"),
		Password: viper.GetString("db.password"),
		Database: viper.GetString("db.database"),
	}

	// 获取redis配置
	redisConfig := common.RedisConfig{
		Host:     viper.GetString("redis.host"),
		Port:     viper.GetInt("redis.port"),
		Password: viper.GetString("redis.password"),
		Db:       viper.GetInt("redis.db"),
	}

	// 初始化数据库
	common.InitMysql(mysqlConfig)
	// 数据迁移
	migrate.Run()
	// 数据生成
	migrate.Seed()
    // 初始化redis
    common.InitRedis(redisConfig)

	// 启动api
	r := gin.New()
	gin.SetMode(viper.GetString("app.mode"))

	// 中间件
	{{if .UseSwagger}}
    r.Use(gin.LoggerWithConfig(gin.LoggerConfig{
        SkipPaths: []string{"/swagger/index.html", "/swagger/doc.json", "/swagger/swagger-ui.css",
            "/swagger/swagger-ui-bundle.js", "/swagger/swagger-ui-standalone-preset.js", "/swagger/favicon-32x32.png"},
    })){{else}}
    r.Use(gin.Logger()){{end}}
	r.Use(gin.Recovery())
	r.Use(middleware.CORS())

	r.Use(gk.GinLogger({{if .UseSwagger}}"swagger"{{end}}))

	{{if .UseSwagger}}
	// swagger
    docs.SwaggerInfo.Title = "{{.AppName}}接口文档"
    docs.SwaggerInfo.BasePath = "/api/v1"
    r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerfiles.Handler))
    {{end}}

	// 路由分组
	v1 := r.Group("api/v1")

	// 心跳
	v1.GET("ping", api.Ping)
    // 注册
    v1.POST("register", api.Register)
    // 登录
    v1.POST("login", api.Login)

	// 添加路由

	// 启动监听
	err = r.Run(":" + viper.GetString("app.port"))
	if err != nil {
		panic(err)
	}

}
